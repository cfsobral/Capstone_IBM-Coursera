library(tidyverse)
library(ggplot2)
library(dplyr)
library(timetk)

##
# Load the seoul_bike_sharing data into a dataframe
#
seoul_bike_sharing <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/datasets/seoul_bike_sharing.csv" 

download.file(seoul_bike_sharing, destfile = "seoul_bike-sharing.csv")

raw_seoul_bike_sharing <- read.csv("seoul_bike-sharing.csv", header = T, fill = T)
head(raw_seoul_bike_sharing)

seoul_bike_sharing <- raw_seoul_bike_sharing

## Solution 1
str(seoul_bike_sharing)

## Solution 2
seoul_bike_sharing$DATE <- as.Date(seoul_bike_sharing$DATE, format = "%d/%m/%Y")

## Solution 3
seoul_bike_sharing$HOUR <- factor(seoul_bike_sharing$HOUR, ordered = T, levels = c("0", "1", "2", "3", "4", "5",
                                                                                   "6", "7", "8", "9", "10",
                                                                                   "11", "12", "13", "14",
                                                                                   "15", "16", "17", "18",
                                                                                   "19", "20", "21", "22", "23"))

seoul_bike_sharing$SEASONS <- as.factor(seoul_bike_sharing$SEASONS)
seoul_bike_sharing$HOLIDAY <- as.factor(seoul_bike_sharing$HOLIDAY)
seoul_bike_sharing$FUNCTIONING_DAY <- as.factor(seoul_bike_sharing$FUNCTIONING_DAY)

## Check the structure of the dataframe
str(seoul_bike_sharing)

## Finally, ensure there are no missing values

sum(is.na(seoul_bike_sharing))


## Task 4 - Dataset Summary
#
## Solution 4

summary(seoul_bike_sharing)

## Task 5 - Based on the above stats, calculate how many Holidays there are.
#
## Solution 5

holydays <- seoul_bike_sharing%>%
  group_by(HOLIDAY)%>%
  count(HOLIDAY)%>%
  filter(HOLIDAY == "Holiday") ## Thanks and acknowledgement for https://stackoverflow.com/questions/38719757/dplyr-to-summarize-columns

print(holydays)

## Task 6 - Calculate the percentage of records that fall on a holiday.
#
## Solution 6

holidaysTotal <- seoul_bike_sharing%>%
  group_by(HOLIDAY)%>%
  count(HOLIDAY)

print(paste("Percentage is:", (holydays$n/sum(holidaysTotal$n))*100, "% holidays"))


## Task 7 - Given there is exactly a full year of data, determine how many records we expect to have.
#
## Solution 7

seoul_bike_sharing%>%
  group_by(DATE)%>%
  filter(DATE >= "2018-1-1" & DATE <= "2018-12-31")%>%
  nrow()

## Task 8 - Given the observations for the 'FUNCTIONING_DAY' how many records must there be?
#
## Solution 8

seoul_bike_sharing%>%
  group_by(FUNCTIONING_DAY)%>%
  filter(DATE >= "2018-1-1" & DATE <= "2018-12-31")%>%
  nrow()

## Task 9 - Load the dplyr package, group the data by SEASONS, and use the summarize() function 
## to calculate the seasonal total rainfall and snowfall.
#
## Solution 9

seoul_bike_sharing%>%
  group_by(SEASONS)%>%
  summarize(sum(RAINFALL), sum(SNOWFALL))

## Data Visualization
#
# Load the ggplot2 package so we can generate some data visualizations.

install.packages("ggplot2")
library(ggplot2)

## Task 10 - Create a scatter plot of RENTED_BIKE_COUNT vs DATE.
#
## Solution 10

ggplot(data = seoul_bike_sharing) + geom_point(mapping = aes(x=DATE, y=RENTED_BIKE_COUNT), alpha = 0.5)

## Task 11 - Create the same plot of the RENTED_BIKE_COUNT time series, but now add HOURS as the colour.
#
## Solution 11

ggplot(data = seoul_bike_sharing) + geom_point(mapping = aes(x=DATE, y=RENTED_BIKE_COUNT, color = HOUR), alpha = 0.5)

## Solution 12
#
# NORMALIZATION OF DATA FOR HISTOGRAM

seoul_bike_sharing_normalized$RENTED_BIKE_COUNT <- (seoul_bike_sharing_normalized$RENTED_BIKE_COUNT - mean(seoul_bike_sharing_normalized$RENTED_BIKE_COUNT)) / 
  sd(seoul_bike_sharing_normalized$RENTED_BIKE_COUNT)

head(seoul_bike_sharing_normalized$RENTED_BIKE_COUNT)

p <- ggplot(data = seoul_bike_sharing, aes(x=RENTED_BIKE_COUNT)) + geom_histogram(aes(y=..density..), fill = "lightblue", color = "black") + 
  geom_density(col = "red")
p

##Task 13 - Use a scatter plot to visualize the correlation between RENTED_BIKE_COUNT and TEMPERATURE by SEASONS.
#
## Solution 13
## Thanks and acknowledgement for https://sscc.wisc.edu/sscc/pubs/DWE/book/3-4-sect-ggplot-multiple-var.html and 


q <- ggplot(data = seoul_bike_sharing, mapping = aes(x= TEMPERATURE, y=RENTED_BIKE_COUNT)) +   
  geom_point(color = "blue") + facet_wrap(~SEASONS) + theme_light() 

q 

## Task 14 - Create a display of four boxplots of RENTED_BIKE_COUNT vs. HOUR grouped by SEASONS.
#
## Solution 14

h <- ggplot(data =seoul_bike_sharing) + geom_boxplot(mapping = aes(x=HOUR, y=RENTED_BIKE_COUNT), colour="darkblue") + 
  facet_wrap(~SEASONS) + theme_light()
h

## Task 15 - Group the data by DATE, and use the summarize() function to calculate the daily total rainfall and snowfall.
#
## Solution 15

rainfall_df <- seoul_bike_sharing%>%
  select(DATE, RAINFALL)%>%
  group_by(DATE)%>%
  filter(RAINFALL > 0)%>%
  summarise(
    Amount = sum(RAINFALL))%>%
  as.data.frame()

x_swon <- snowfall_df
x_swon['type'] ="Snowfall"
x_swon['Normalized'] = (x_swon$Amount - mean(x_swon$Amount))/(sd(x_swon$Amount))


snowfall_df <- seoul_bike_sharing%>%
  select(DATE, SNOWFALL)%>%
  group_by(DATE)%>%
  filter(SNOWFALL > 0)%>%
  summarise(
    Amount = sum(SNOWFALL))%>%
  as.data.frame()

x_rain <- rainfall_df
x_rain['type'] ="Rainfall"
x_rain <- x_rain['Normalized'] = (x_rain$Amount - mean(x_rain$Amount))/(sd(x_rain$Amount))

## MERGE TWO DATAFRAME - SNOWFALL AND RAINFALL 
# Thanks and acknowledgement by ideas and examples - https://www.delftstack.com/howto/r/merge-in-r/ 
snowfall_rainfall_df <- x_rain%>%
  full_join(x_swon)

snowfall_rainfall_df$type <- as.factor(snowfall_rainfall_df$type)


## Thanks to https://www.tutorialspoint.com/how-to-change-the-color-of-points-in-a-scatterplot-using-ggplot2-in-r

w <- ggplot(data = snowfall_rainfall_df) + geom_point(mapping = aes(x = DATE, y= Normalized, color=Normalized)) + 
  facet_wrap(~type) + labs(color ="Amount Normalized", hjust = 15) 


w

## Task 16 - Determine how many days had snowfall.
#
## Solution 16

days <- seoul_bike_sharing%>% 
  group_by(DATE)%>%
  filter(SNOWFALL > 0)%>%
  summarise_by_time(
    .date_var = DATE,
    .by = "day")%>%
  nrow()

days
